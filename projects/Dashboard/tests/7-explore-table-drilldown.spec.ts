import { test, expect } from '@playwright/test';
import { ExploreOrganizations } from '../models/exploreOrganizations';
import { ExplorePayableInvoices } from '../models/explorePayableInvoices';
import { ExploreShipments } from '../models/exploreShipments'
import { waitForFilterSectionToLoad, waitforTablePageLoad } from '../../utils';
import { DEFAULT_TIMEOUT_IN_MS } from '../../constants';

test.describe('[16.2] Clicks on revenue invoices link with org type... ', () => {
    test('Shipper', async ({ page }) => {
      const exOrg = new ExploreOrganizations(page)
      const pay = new ExplorePayableInvoices(page)
      await exOrg.goto()
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await exOrg.globalFilterSection.setOrgType("Shipper")
      await exOrg.waitForReferenceComponent()
      await exOrg.globalNativeTable.clickColumnHeader('Total Revenue excl. Tax')
      await exOrg.waitForReferenceComponent()
      const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_revenue")
      await exOrg.globalNativeTable.clickDrillDownLink(0,'See receivable invoices')
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      const payRevenue = await pay.globalNativeTable.parseSumAmount('amount', 'SUM')
      const result = await pay.globalNativeTable.evalDiff(payRevenue, orgRevenue)
      expect(result).toBe(true)
    })

    test('Consignee', async ({ page }) => {
      const exOrg = new ExploreOrganizations(page)
      const pay = new ExplorePayableInvoices(page)
      await exOrg.goto()
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await exOrg.globalFilterSection.setOrgType("Consignee")
      await exOrg.waitForReferenceComponent()
      await exOrg.globalNativeTable.clickColumnHeader('Total Revenue excl. Tax')
      await exOrg.waitForReferenceComponent()
      const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_revenue")
      await exOrg.globalNativeTable.clickDrillDownLink(0,'See receivable invoices')
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      const payRevenue = await pay.globalNativeTable.parseSumAmount('amount', 'SUM')
      const result = await pay.globalNativeTable.evalDiff(payRevenue, orgRevenue)
      expect(result).toBe(true)
    })

    test('Local Client', async ({ page }) => {
      const exOrg = new ExploreOrganizations(page)
      const pay = new ExplorePayableInvoices(page)
      await exOrg.goto()
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await exOrg.globalFilterSection.setOrgType("Local Client")
      await exOrg.waitForReferenceComponent()
      await exOrg.globalNativeTable.clickColumnHeader('Total Revenue excl. Tax')
      await exOrg.waitForReferenceComponent()
      const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_revenue")
      await exOrg.globalNativeTable.clickDrillDownLink(0,'See receivable invoices')
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      const payRevenue = await pay.globalNativeTable.parseSumAmount('amount', 'SUM')
      const result = await pay.globalNativeTable.evalDiff(payRevenue, orgRevenue)
      expect(result).toBe(true)
    })

    test('Debtor', async ({ page }) => {
      const exOrg = new ExploreOrganizations(page)
      const pay = new ExplorePayableInvoices(page)
      await exOrg.goto()
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await exOrg.globalFilterSection.setOrgType("Debtor")
      await exOrg.waitForReferenceComponent()
      await exOrg.globalNativeTable.clickColumnHeader('Total Revenue excl. Tax')
      await exOrg.waitForReferenceComponent()
      const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_revenue")
      await exOrg.globalNativeTable.clickDrillDownLink(0,'See receivable invoices')
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      const payRevenue = await pay.globalNativeTable.parseSumAmount('amount', 'SUM')
      const result = await pay.globalNativeTable.evalDiff(payRevenue, orgRevenue)
      expect(result).toBe(true)
    })

    test('Creditor', async ({ page }) => {
      const exOrg = new ExploreOrganizations(page)
      const pay = new ExplorePayableInvoices(page)
      await exOrg.goto()
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await exOrg.globalFilterSection.setOrgType("Creditor")
      await exOrg.waitForReferenceComponent()
      await exOrg.globalNativeTable.clickColumnHeader('Total Revenue excl. Tax')
      await exOrg.waitForReferenceComponent()
      const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_revenue")
      await exOrg.globalNativeTable.clickDrillDownLink(0,'See receivable invoices')
      await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
      await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
      const payRevenue = await pay.globalNativeTable.parseSumAmount('amount', 'SUM')
      const result = await pay.globalNativeTable.evalDiff(payRevenue, orgRevenue)
      expect(result).toBe(true)
    })
})

test.describe('[16.3] Clicks on Shipments link with org type... ', () => {
  test('Shipper', async ({ page }) => {
    const exOrg = new ExploreOrganizations(page)
    const ship = new ExploreShipments(page)
    await exOrg.goto()
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await exOrg.globalFilterSection.setOrgType("Shipper")
    await exOrg.waitForReferenceComponent()
    await exOrg.globalNativeTable.clickColumnHeader('Number of Shipments')
    await exOrg.waitForReferenceComponent()
    const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_shipments")
    await exOrg.globalNativeTable.clickDrillDownLink(0,'See shipments')
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await ship.waitForReferenceComponent()
    const shipNum = await ship.globalNativeTable.parseFooterCount()
    const result = await ship.globalNativeTable.evalDiff(shipNum, orgRevenue)
    expect(result).toBe(true)
  })

  test('Consignee', async ({ page }) => {
    const exOrg = new ExploreOrganizations(page)
    const ship = new ExploreShipments(page)
    await exOrg.goto()
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await exOrg.globalFilterSection.setOrgType("Consignee")
    await exOrg.waitForReferenceComponent()
    await exOrg.globalNativeTable.clickColumnHeader('Number of Shipments')
    await exOrg.waitForReferenceComponent()
    const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_shipments")
    await exOrg.globalNativeTable.clickDrillDownLink(0,'See shipments')
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await ship.waitForReferenceComponent()
    const shipNum = await ship.globalNativeTable.parseFooterCount()
    const result = await ship.globalNativeTable.evalDiff(shipNum, orgRevenue)
    expect(result).toBe(true)
  })

  test('Local Client', async ({ page }) => {
    const exOrg = new ExploreOrganizations(page)
    const ship = new ExploreShipments(page)
    await exOrg.goto()
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await exOrg.globalFilterSection.setOrgType("Local Client")
    await exOrg.waitForReferenceComponent()
    await exOrg.globalNativeTable.clickColumnHeader('Number of Shipments')
    await exOrg.waitForReferenceComponent()
    const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_shipments")
    await exOrg.globalNativeTable.clickDrillDownLink(0,'See shipments')
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await ship.waitForReferenceComponent()
    const shipNum = await ship.globalNativeTable.parseFooterCount()
    const result = await ship.globalNativeTable.evalDiff(shipNum, orgRevenue)
    expect(result).toBe(true)
  })

  test('Debtor', async ({ page }) => {
    const exOrg = new ExploreOrganizations(page)
    const ship = new ExploreShipments(page)
    await exOrg.goto()
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await exOrg.globalFilterSection.setOrgType("Debtor")
    await exOrg.waitForReferenceComponent()
    await exOrg.globalNativeTable.clickColumnHeader('Number of Shipments')
    await exOrg.waitForReferenceComponent()
    const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_shipments")
    await exOrg.globalNativeTable.clickDrillDownLink(0,'See shipments')
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await ship.waitForReferenceComponent()
    const shipNum = await ship.globalNativeTable.parseFooterCount()
    const result = await ship.globalNativeTable.evalDiff(shipNum, orgRevenue)
    expect(result).toBe(true)
  })

  test('Creditor', async ({ page }) => {
    const exOrg = new ExploreOrganizations(page)
    const ship = new ExploreShipments(page)
    await exOrg.goto()
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await waitforTablePageLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await exOrg.globalFilterSection.setOrgType("Creditor")
    await exOrg.waitForReferenceComponent()
    await exOrg.globalNativeTable.clickColumnHeader('Number of Shipments')
    await exOrg.waitForReferenceComponent()
    const orgRevenue = await exOrg.globalNativeTable.parseCellAmount(0, "total_shipments")
    await exOrg.globalNativeTable.clickDrillDownLink(0,'See shipments')
    await waitForFilterSectionToLoad(page, DEFAULT_TIMEOUT_IN_MS)
    await ship.waitForReferenceComponent()
    const shipNum = await ship.globalNativeTable.parseFooterCount()
    const result = await ship.globalNativeTable.evalDiff(shipNum, orgRevenue)
    expect(result).toBe(true)
  })
})